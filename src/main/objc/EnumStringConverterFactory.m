//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/eric/repos/360-j2objc/joda-convert/build/mainTranslationExtraction/org/joda/convert/EnumStringConverterFactory.java
//

#include "EnumStringConverterFactory.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "RenameHandler.h"
#include "StringConverter.h"
#include "StringConverterFactory.h"
#include "java/lang/Enum.h"

@interface OrgJodaConvertEnumStringConverterFactory ()

- (instancetype)init;

@end

__attribute__((unused)) static void OrgJodaConvertEnumStringConverterFactory_init(OrgJodaConvertEnumStringConverterFactory *self);

__attribute__((unused)) static OrgJodaConvertEnumStringConverterFactory *new_OrgJodaConvertEnumStringConverterFactory_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaConvertEnumStringConverterFactory *create_OrgJodaConvertEnumStringConverterFactory_init();

@interface OrgJodaConvertEnumStringConverterFactory_EnumStringConverter () {
 @public
  IOSClass *effectiveType_;
}

@end

J2OBJC_FIELD_SETTER(OrgJodaConvertEnumStringConverterFactory_EnumStringConverter, effectiveType_, IOSClass *)

J2OBJC_INITIALIZED_DEFN(OrgJodaConvertEnumStringConverterFactory)

id<OrgJodaConvertStringConverterFactory> OrgJodaConvertEnumStringConverterFactory_INSTANCE;

@implementation OrgJodaConvertEnumStringConverterFactory

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJodaConvertEnumStringConverterFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<OrgJodaConvertStringConverter>)findConverterWithIOSClass:(IOSClass *)cls {
  IOSClass *sup = [((IOSClass *) nil_chk(cls)) getSuperclass];
  if (sup == JavaLangEnum_class_()) {
    return new_OrgJodaConvertEnumStringConverterFactory_EnumStringConverter_initWithOrgJodaConvertEnumStringConverterFactory_withIOSClass_(self, cls);
  }
  else if (sup != nil && [sup getSuperclass] == (id) JavaLangEnum_class_()) {
    return new_OrgJodaConvertEnumStringConverterFactory_EnumStringConverter_initWithOrgJodaConvertEnumStringConverterFactory_withIOSClass_(self, sup);
  }
  return nil;
}

- (NSString *)description {
  return [[self getClass] getSimpleName];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJodaConvertStringConverter;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(findConverterWithIOSClass:);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LOrgJodaConvertStringConverterFactory;", .constantValue.asLong = 0, 0x18, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "findConverter", "LIOSClass;", "(Ljava/lang/Class<*>;)Lorg/joda/convert/StringConverter<*>;", "toString", &OrgJodaConvertEnumStringConverterFactory_INSTANCE, "LOrgJodaConvertEnumStringConverterFactory_EnumStringConverter;" };
  static const J2ObjcClassInfo _OrgJodaConvertEnumStringConverterFactory = { "EnumStringConverterFactory", "org.joda.convert", ptrTable, methods, fields, 7, 0x10, 3, 1, -1, 5, -1, -1, -1 };
  return &_OrgJodaConvertEnumStringConverterFactory;
}

+ (void)initialize {
  if (self == [OrgJodaConvertEnumStringConverterFactory class]) {
    OrgJodaConvertEnumStringConverterFactory_INSTANCE = new_OrgJodaConvertEnumStringConverterFactory_init();
    J2OBJC_SET_INITIALIZED(OrgJodaConvertEnumStringConverterFactory)
  }
}

@end

void OrgJodaConvertEnumStringConverterFactory_init(OrgJodaConvertEnumStringConverterFactory *self) {
  NSObject_init(self);
}

OrgJodaConvertEnumStringConverterFactory *new_OrgJodaConvertEnumStringConverterFactory_init() {
  J2OBJC_NEW_IMPL(OrgJodaConvertEnumStringConverterFactory, init)
}

OrgJodaConvertEnumStringConverterFactory *create_OrgJodaConvertEnumStringConverterFactory_init() {
  J2OBJC_CREATE_IMPL(OrgJodaConvertEnumStringConverterFactory, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaConvertEnumStringConverterFactory)

@implementation OrgJodaConvertEnumStringConverterFactory_EnumStringConverter

- (instancetype)initWithOrgJodaConvertEnumStringConverterFactory:(OrgJodaConvertEnumStringConverterFactory *)outer$
                                                    withIOSClass:(IOSClass *)effectiveType {
  OrgJodaConvertEnumStringConverterFactory_EnumStringConverter_initWithOrgJodaConvertEnumStringConverterFactory_withIOSClass_(self, outer$, effectiveType);
  return self;
}

- (NSString *)convertToStringWithId:(JavaLangEnum *)en {
  return [((JavaLangEnum *) nil_chk(en)) name];
}

- (JavaLangEnum *)convertFromStringWithIOSClass:(IOSClass *)cls
                                   withNSString:(NSString *)str {
  return [((OrgJodaConvertRenameHandler *) nil_chk(JreLoadStatic(OrgJodaConvertRenameHandler, INSTANCE))) lookupEnumWithIOSClass:cls withNSString:str];
}

- (IOSClass *)getEffectiveType {
  return effectiveType_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LJavaLangEnum;", 0x1, 5, 6, -1, 7, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, 8, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithOrgJodaConvertEnumStringConverterFactory:withIOSClass:);
  methods[1].selector = @selector(convertToStringWithId:);
  methods[2].selector = @selector(convertFromStringWithIOSClass:withNSString:);
  methods[3].selector = @selector(getEffectiveType);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "effectiveType_", "LIOSClass;", .constantValue.asLong = 0, 0x12, -1, -1, 9, -1 },
  };
  static const void *ptrTable[] = { "LOrgJodaConvertEnumStringConverterFactory;LIOSClass;", "(Lorg/joda/convert/EnumStringConverterFactory;Ljava/lang/Class<*>;)V", "convertToString", "LJavaLangEnum;", "(Ljava/lang/Enum<*>;)Ljava/lang/String;", "convertFromString", "LIOSClass;LNSString;", "(Ljava/lang/Class<+Ljava/lang/Enum<*>;>;Ljava/lang/String;)Ljava/lang/Enum<*>;", "()Ljava/lang/Class<*>;", "Ljava/lang/Class<*>;", "LOrgJodaConvertEnumStringConverterFactory;", "Ljava/lang/Object;Lorg/joda/convert/TypedStringConverter<Ljava/lang/Enum<*>;>;" };
  static const J2ObjcClassInfo _OrgJodaConvertEnumStringConverterFactory_EnumStringConverter = { "EnumStringConverter", "org.joda.convert", ptrTable, methods, fields, 7, 0x10, 4, 1, 10, -1, -1, 11, -1 };
  return &_OrgJodaConvertEnumStringConverterFactory_EnumStringConverter;
}

@end

void OrgJodaConvertEnumStringConverterFactory_EnumStringConverter_initWithOrgJodaConvertEnumStringConverterFactory_withIOSClass_(OrgJodaConvertEnumStringConverterFactory_EnumStringConverter *self, OrgJodaConvertEnumStringConverterFactory *outer$, IOSClass *effectiveType) {
  NSObject_init(self);
  self->effectiveType_ = effectiveType;
}

OrgJodaConvertEnumStringConverterFactory_EnumStringConverter *new_OrgJodaConvertEnumStringConverterFactory_EnumStringConverter_initWithOrgJodaConvertEnumStringConverterFactory_withIOSClass_(OrgJodaConvertEnumStringConverterFactory *outer$, IOSClass *effectiveType) {
  J2OBJC_NEW_IMPL(OrgJodaConvertEnumStringConverterFactory_EnumStringConverter, initWithOrgJodaConvertEnumStringConverterFactory_withIOSClass_, outer$, effectiveType)
}

OrgJodaConvertEnumStringConverterFactory_EnumStringConverter *create_OrgJodaConvertEnumStringConverterFactory_EnumStringConverter_initWithOrgJodaConvertEnumStringConverterFactory_withIOSClass_(OrgJodaConvertEnumStringConverterFactory *outer$, IOSClass *effectiveType) {
  J2OBJC_CREATE_IMPL(OrgJodaConvertEnumStringConverterFactory_EnumStringConverter, initWithOrgJodaConvertEnumStringConverterFactory_withIOSClass_, outer$, effectiveType)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaConvertEnumStringConverterFactory_EnumStringConverter)
