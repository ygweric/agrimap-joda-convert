//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/eric/repos/360-j2objc/joda-convert/build/mainTranslationExtraction/org/joda/convert/MethodConstructorStringConverter.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "MethodConstructorStringConverter.h"
#include "ReflectionStringConverter.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/InstantiationException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/reflect/Constructor.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/lang/reflect/Method.h"
#include "java/lang/reflect/Modifier.h"

@interface OrgJodaConvertMethodConstructorStringConverter () {
 @public
  JavaLangReflectConstructor *fromString_;
}

@end

J2OBJC_FIELD_SETTER(OrgJodaConvertMethodConstructorStringConverter, fromString_, JavaLangReflectConstructor *)

@implementation OrgJodaConvertMethodConstructorStringConverter

- (instancetype)initWithIOSClass:(IOSClass *)cls
       withJavaLangReflectMethod:(JavaLangReflectMethod *)toString
  withJavaLangReflectConstructor:(JavaLangReflectConstructor *)fromString {
  OrgJodaConvertMethodConstructorStringConverter_initWithIOSClass_withJavaLangReflectMethod_withJavaLangReflectConstructor_(self, cls, toString, fromString);
  return self;
}

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  @try {
    return [((JavaLangReflectConstructor *) nil_chk(fromString_)) newInstanceWithNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ str } count:1 type:NSObject_class_()]];
  }
  @catch (JavaLangIllegalAccessException *ex) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Constructor is not accessible: ", fromString_));
  }
  @catch (JavaLangInstantiationException *ex) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"Constructor is not valid: ", fromString_));
  }
  @catch (JavaLangReflectInvocationTargetException *ex) {
    if ([[((JavaLangReflectInvocationTargetException *) nil_chk(ex)) getCause] isKindOfClass:[JavaLangRuntimeException class]]) {
      @throw (JavaLangRuntimeException *) cast_chk([ex getCause], [JavaLangRuntimeException class]);
    }
    @throw new_JavaLangRuntimeException_initWithNSString_withNSException_([ex getMessage], [ex getCause]);
  }
}

- (IOSClass *)getEffectiveType {
  return [((JavaLangReflectConstructor *) nil_chk(fromString_)) getDeclaringClass];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(initWithIOSClass:withJavaLangReflectMethod:withJavaLangReflectConstructor:);
  methods[1].selector = @selector(convertFromStringWithIOSClass:withNSString:);
  methods[2].selector = @selector(getEffectiveType);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "fromString_", "LJavaLangReflectConstructor;", .constantValue.asLong = 0, 0x12, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LIOSClass;LJavaLangReflectMethod;LJavaLangReflectConstructor;", "(Ljava/lang/Class<TT;>;Ljava/lang/reflect/Method;Ljava/lang/reflect/Constructor<TT;>;)V", "convertFromString", "LIOSClass;LNSString;", "(Ljava/lang/Class<+TT;>;Ljava/lang/String;)TT;", "()Ljava/lang/Class<*>;", "Ljava/lang/reflect/Constructor<TT;>;", "<T:Ljava/lang/Object;>Lorg/joda/convert/ReflectionStringConverter<TT;>;" };
  static const J2ObjcClassInfo _OrgJodaConvertMethodConstructorStringConverter = { "MethodConstructorStringConverter", "org.joda.convert", ptrTable, methods, fields, 7, 0x10, 3, 1, -1, -1, -1, 7, -1 };
  return &_OrgJodaConvertMethodConstructorStringConverter;
}

@end

void OrgJodaConvertMethodConstructorStringConverter_initWithIOSClass_withJavaLangReflectMethod_withJavaLangReflectConstructor_(OrgJodaConvertMethodConstructorStringConverter *self, IOSClass *cls, JavaLangReflectMethod *toString, JavaLangReflectConstructor *fromString) {
  OrgJodaConvertReflectionStringConverter_initWithIOSClass_withJavaLangReflectMethod_(self, cls, toString);
  if ([((IOSClass *) nil_chk(cls)) isInterface] || JavaLangReflectModifier_isAbstractWithInt_([cls getModifiers]) || [cls isLocalClass] || [cls isMemberClass]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"FromString constructor must be on an instantiable class: ", fromString));
  }
  if ([((JavaLangReflectConstructor *) nil_chk(fromString)) getDeclaringClass] != cls) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"FromString constructor must be defined on specified class: ", fromString));
  }
  self->fromString_ = fromString;
}

OrgJodaConvertMethodConstructorStringConverter *new_OrgJodaConvertMethodConstructorStringConverter_initWithIOSClass_withJavaLangReflectMethod_withJavaLangReflectConstructor_(IOSClass *cls, JavaLangReflectMethod *toString, JavaLangReflectConstructor *fromString) {
  J2OBJC_NEW_IMPL(OrgJodaConvertMethodConstructorStringConverter, initWithIOSClass_withJavaLangReflectMethod_withJavaLangReflectConstructor_, cls, toString, fromString)
}

OrgJodaConvertMethodConstructorStringConverter *create_OrgJodaConvertMethodConstructorStringConverter_initWithIOSClass_withJavaLangReflectMethod_withJavaLangReflectConstructor_(IOSClass *cls, JavaLangReflectMethod *toString, JavaLangReflectConstructor *fromString) {
  J2OBJC_CREATE_IMPL(OrgJodaConvertMethodConstructorStringConverter, initWithIOSClass_withJavaLangReflectMethod_withJavaLangReflectConstructor_, cls, toString, fromString)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaConvertMethodConstructorStringConverter)
