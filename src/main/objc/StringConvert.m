//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/eric/repos/360-j2objc/joda-convert/build/mainTranslationExtraction/org/joda/convert/StringConvert.java
//

#include "AnnotationStringConverterFactory.h"
#include "BooleanArrayStringConverterFactory.h"
#include "BooleanObjectArrayStringConverterFactory.h"
#include "ByteObjectArrayStringConverterFactory.h"
#include "CharObjectArrayStringConverterFactory.h"
#include "EnumStringConverterFactory.h"
#include "FromStringConverter.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "JDKStringConverter.h"
#include "MethodConstructorStringConverter.h"
#include "MethodsStringConverter.h"
#include "NumericArrayStringConverterFactory.h"
#include "NumericObjectArrayStringConverterFactory.h"
#include "RenameHandler.h"
#include "StringConvert.h"
#include "StringConverter.h"
#include "StringConverterFactory.h"
#include "ToStringConverter.h"
#include "TypedAdapter.h"
#include "TypedStringConverter.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/lang/Double.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Short.h"
#include "java/lang/reflect/Constructor.h"
#include "java/lang/reflect/Method.h"
#include "java/lang/reflect/Modifier.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/concurrent/ConcurrentHashMap.h"
#include "java/util/concurrent/ConcurrentMap.h"
#include "java/util/concurrent/CopyOnWriteArrayList.h"

@interface OrgJodaConvertStringConvert () {
 @public
  JavaUtilConcurrentCopyOnWriteArrayList *factories_;
  id<JavaUtilConcurrentConcurrentMap> registered_;
}

- (void)tryRegisterGuava;

- (void)tryRegisterWithNSString:(NSString *)className_
                   withNSString:(NSString *)fromStringMethodName;

- (id<OrgJodaConvertTypedStringConverter>)findConverterQuietWithIOSClass:(IOSClass *)cls;

- (id<OrgJodaConvertTypedStringConverter>)findAnyConverterWithIOSClass:(IOSClass *)cls;

- (JavaLangReflectMethod *)findToStringMethodWithIOSClass:(IOSClass *)cls
                                             withNSString:(NSString *)methodName;

- (JavaLangReflectMethod *)findFromStringMethodWithIOSClass:(IOSClass *)cls
                                               withNSString:(NSString *)methodName;

- (JavaLangReflectConstructor *)findFromStringConstructorByTypeWithIOSClass:(IOSClass *)cls;

@end

J2OBJC_FIELD_SETTER(OrgJodaConvertStringConvert, factories_, JavaUtilConcurrentCopyOnWriteArrayList *)
J2OBJC_FIELD_SETTER(OrgJodaConvertStringConvert, registered_, id<JavaUtilConcurrentConcurrentMap>)

inline id<OrgJodaConvertTypedStringConverter> OrgJodaConvertStringConvert_get_CACHED_NULL();
static id<OrgJodaConvertTypedStringConverter> OrgJodaConvertStringConvert_CACHED_NULL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaConvertStringConvert, CACHED_NULL, id<OrgJodaConvertTypedStringConverter>)

__attribute__((unused)) static void OrgJodaConvertStringConvert_tryRegisterGuava(OrgJodaConvertStringConvert *self);

__attribute__((unused)) static void OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(OrgJodaConvertStringConvert *self, NSString *className_, NSString *fromStringMethodName);

__attribute__((unused)) static id<OrgJodaConvertTypedStringConverter> OrgJodaConvertStringConvert_findConverterQuietWithIOSClass_(OrgJodaConvertStringConvert *self, IOSClass *cls);

__attribute__((unused)) static id<OrgJodaConvertTypedStringConverter> OrgJodaConvertStringConvert_findAnyConverterWithIOSClass_(OrgJodaConvertStringConvert *self, IOSClass *cls);

__attribute__((unused)) static JavaLangReflectMethod *OrgJodaConvertStringConvert_findToStringMethodWithIOSClass_withNSString_(OrgJodaConvertStringConvert *self, IOSClass *cls, NSString *methodName);

__attribute__((unused)) static JavaLangReflectMethod *OrgJodaConvertStringConvert_findFromStringMethodWithIOSClass_withNSString_(OrgJodaConvertStringConvert *self, IOSClass *cls, NSString *methodName);

__attribute__((unused)) static JavaLangReflectConstructor *OrgJodaConvertStringConvert_findFromStringConstructorByTypeWithIOSClass_(OrgJodaConvertStringConvert *self, IOSClass *cls);

@interface OrgJodaConvertStringConvert_$1 : NSObject < OrgJodaConvertTypedStringConverter >

- (NSString *)convertToStringWithId:(id)object;

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str;

- (IOSClass *)getEffectiveType;

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaConvertStringConvert_$1)

__attribute__((unused)) static void OrgJodaConvertStringConvert_$1_init(OrgJodaConvertStringConvert_$1 *self);

__attribute__((unused)) static OrgJodaConvertStringConvert_$1 *new_OrgJodaConvertStringConvert_$1_init() NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaConvertStringConvert_$1 *create_OrgJodaConvertStringConvert_$1_init();

@interface OrgJodaConvertStringConvert_$2 : NSObject < OrgJodaConvertTypedStringConverter > {
 @public
  id<OrgJodaConvertToStringConverter> val$toString_;
  id<OrgJodaConvertFromStringConverter> val$fromString_;
  IOSClass *val$cls_;
}

- (NSString *)convertToStringWithId:(id)object;

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str;

- (IOSClass *)getEffectiveType;

- (instancetype)initWithOrgJodaConvertToStringConverter:(id<OrgJodaConvertToStringConverter>)capture$0
                  withOrgJodaConvertFromStringConverter:(id<OrgJodaConvertFromStringConverter>)capture$1
                                           withIOSClass:(IOSClass *)capture$2;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJodaConvertStringConvert_$2)

J2OBJC_FIELD_SETTER(OrgJodaConvertStringConvert_$2, val$toString_, id<OrgJodaConvertToStringConverter>)
J2OBJC_FIELD_SETTER(OrgJodaConvertStringConvert_$2, val$fromString_, id<OrgJodaConvertFromStringConverter>)
J2OBJC_FIELD_SETTER(OrgJodaConvertStringConvert_$2, val$cls_, IOSClass *)

__attribute__((unused)) static void OrgJodaConvertStringConvert_$2_initWithOrgJodaConvertToStringConverter_withOrgJodaConvertFromStringConverter_withIOSClass_(OrgJodaConvertStringConvert_$2 *self, id<OrgJodaConvertToStringConverter> capture$0, id<OrgJodaConvertFromStringConverter> capture$1, IOSClass *capture$2);

__attribute__((unused)) static OrgJodaConvertStringConvert_$2 *new_OrgJodaConvertStringConvert_$2_initWithOrgJodaConvertToStringConverter_withOrgJodaConvertFromStringConverter_withIOSClass_(id<OrgJodaConvertToStringConverter> capture$0, id<OrgJodaConvertFromStringConverter> capture$1, IOSClass *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJodaConvertStringConvert_$2 *create_OrgJodaConvertStringConvert_$2_initWithOrgJodaConvertToStringConverter_withOrgJodaConvertFromStringConverter_withIOSClass_(id<OrgJodaConvertToStringConverter> capture$0, id<OrgJodaConvertFromStringConverter> capture$1, IOSClass *capture$2);

J2OBJC_INITIALIZED_DEFN(OrgJodaConvertStringConvert)

OrgJodaConvertStringConvert *OrgJodaConvertStringConvert_INSTANCE;

@implementation OrgJodaConvertStringConvert

+ (OrgJodaConvertStringConvert *)create {
  return OrgJodaConvertStringConvert_create();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJodaConvertStringConvert_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithBoolean:(jboolean)includeJdkConverters
withOrgJodaConvertStringConverterFactoryArray:(IOSObjectArray *)factories {
  OrgJodaConvertStringConvert_initWithBoolean_withOrgJodaConvertStringConverterFactoryArray_(self, includeJdkConverters, factories);
  return self;
}

- (void)tryRegisterGuava {
  OrgJodaConvertStringConvert_tryRegisterGuava(self);
}

- (void)tryRegisterWithNSString:(NSString *)className_
                   withNSString:(NSString *)fromStringMethodName {
  OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, className_, fromStringMethodName);
}

- (NSString *)convertToStringWithId:(id)object {
  if (object == nil) {
    return nil;
  }
  IOSClass *cls = [object getClass];
  id<OrgJodaConvertStringConverter> conv = [self findConverterNoGenericsWithIOSClass:cls];
  return [((id<OrgJodaConvertStringConverter>) nil_chk(conv)) convertToStringWithId:object];
}

- (NSString *)convertToStringWithIOSClass:(IOSClass *)cls
                                   withId:(id)object {
  if (object == nil) {
    return nil;
  }
  id<OrgJodaConvertStringConverter> conv = [self findConverterNoGenericsWithIOSClass:cls];
  return [((id<OrgJodaConvertStringConverter>) nil_chk(conv)) convertToStringWithId:object];
}

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  if (str == nil) {
    return nil;
  }
  id<OrgJodaConvertStringConverter> conv = [self findConverterWithIOSClass:cls];
  return [((id<OrgJodaConvertStringConverter>) nil_chk(conv)) convertFromStringWithIOSClass:cls withNSString:str];
}

- (jboolean)isConvertibleWithIOSClass:(IOSClass *)cls {
  @try {
    return cls != nil && OrgJodaConvertStringConvert_findConverterQuietWithIOSClass_(self, cls) != nil;
  }
  @catch (JavaLangRuntimeException *ex) {
    return false;
  }
}

- (id<OrgJodaConvertStringConverter>)findConverterWithIOSClass:(IOSClass *)cls {
  return [self findTypedConverterWithIOSClass:cls];
}

- (id<OrgJodaConvertStringConverter>)findConverterNoGenericsWithIOSClass:(IOSClass *)cls {
  return [self findTypedConverterNoGenericsWithIOSClass:cls];
}

- (id<OrgJodaConvertTypedStringConverter>)findTypedConverterWithIOSClass:(IOSClass *)cls {
  id<OrgJodaConvertTypedStringConverter> conv = OrgJodaConvertStringConvert_findConverterQuietWithIOSClass_(self, cls);
  if (conv == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"No registered converter found: ", cls));
  }
  return conv;
}

- (id<OrgJodaConvertTypedStringConverter>)findTypedConverterNoGenericsWithIOSClass:(IOSClass *)cls {
  id<OrgJodaConvertTypedStringConverter> conv = OrgJodaConvertStringConvert_findConverterQuietWithIOSClass_(self, cls);
  if (conv == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@", @"No registered converter found: ", cls));
  }
  return conv;
}

- (id<OrgJodaConvertTypedStringConverter>)findConverterQuietWithIOSClass:(IOSClass *)cls {
  return OrgJodaConvertStringConvert_findConverterQuietWithIOSClass_(self, cls);
}

- (id<OrgJodaConvertTypedStringConverter>)findAnyConverterWithIOSClass:(IOSClass *)cls {
  return OrgJodaConvertStringConvert_findAnyConverterWithIOSClass_(self, cls);
}

- (void)registerFactoryWithOrgJodaConvertStringConverterFactory:(id<OrgJodaConvertStringConverterFactory>)factory {
  if (factory == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Factory must not be null");
  }
  if (self == OrgJodaConvertStringConvert_INSTANCE) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Global singleton cannot be extended");
  }
  [((JavaUtilConcurrentCopyOnWriteArrayList *) nil_chk(factories_)) addWithInt:0 withId:factory];
}

- (void)register__WithIOSClass:(IOSClass *)cls
withOrgJodaConvertStringConverter:(id<OrgJodaConvertStringConverter>)converter {
  if (cls == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Class must not be null");
  }
  if (converter == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"StringConverter must not be null");
  }
  if (self == OrgJodaConvertStringConvert_INSTANCE) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Global singleton cannot be extended");
  }
  (void) [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(registered_)) putWithId:cls withId:OrgJodaConvertTypedAdapter_adaptWithIOSClass_withOrgJodaConvertStringConverter_(cls, converter)];
}

- (void)register__WithIOSClass:(IOSClass *)cls
withOrgJodaConvertToStringConverter:(id<OrgJodaConvertToStringConverter>)toString
withOrgJodaConvertFromStringConverter:(id<OrgJodaConvertFromStringConverter>)fromString {
  if (fromString == nil || toString == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Converters must not be null");
  }
  [self register__WithIOSClass:cls withOrgJodaConvertStringConverter:new_OrgJodaConvertStringConvert_$2_initWithOrgJodaConvertToStringConverter_withOrgJodaConvertFromStringConverter_withIOSClass_(toString, fromString, cls)];
}

- (void)registerMethodsWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)toStringMethodName
                       withNSString:(NSString *)fromStringMethodName {
  if (cls == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Class must not be null");
  }
  if (toStringMethodName == nil || fromStringMethodName == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Method names must not be null");
  }
  if (self == OrgJodaConvertStringConvert_INSTANCE) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Global singleton cannot be extended");
  }
  JavaLangReflectMethod *toString = OrgJodaConvertStringConvert_findToStringMethodWithIOSClass_withNSString_(self, cls, toStringMethodName);
  JavaLangReflectMethod *fromString = OrgJodaConvertStringConvert_findFromStringMethodWithIOSClass_withNSString_(self, cls, fromStringMethodName);
  OrgJodaConvertMethodsStringConverter *converter = new_OrgJodaConvertMethodsStringConverter_initWithIOSClass_withJavaLangReflectMethod_withJavaLangReflectMethod_withIOSClass_(cls, toString, fromString, cls);
  (void) [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(registered_)) putIfAbsentWithId:cls withId:converter];
}

- (void)registerMethodConstructorWithIOSClass:(IOSClass *)cls
                                 withNSString:(NSString *)toStringMethodName {
  if (cls == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Class must not be null");
  }
  if (toStringMethodName == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Method name must not be null");
  }
  if (self == OrgJodaConvertStringConvert_INSTANCE) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"Global singleton cannot be extended");
  }
  JavaLangReflectMethod *toString = OrgJodaConvertStringConvert_findToStringMethodWithIOSClass_withNSString_(self, cls, toStringMethodName);
  JavaLangReflectConstructor *fromString = OrgJodaConvertStringConvert_findFromStringConstructorByTypeWithIOSClass_(self, cls);
  OrgJodaConvertMethodConstructorStringConverter *converter = new_OrgJodaConvertMethodConstructorStringConverter_initWithIOSClass_withJavaLangReflectMethod_withJavaLangReflectConstructor_(cls, toString, fromString);
  (void) [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(registered_)) putIfAbsentWithId:cls withId:converter];
}

- (JavaLangReflectMethod *)findToStringMethodWithIOSClass:(IOSClass *)cls
                                             withNSString:(NSString *)methodName {
  return OrgJodaConvertStringConvert_findToStringMethodWithIOSClass_withNSString_(self, cls, methodName);
}

- (JavaLangReflectMethod *)findFromStringMethodWithIOSClass:(IOSClass *)cls
                                               withNSString:(NSString *)methodName {
  return OrgJodaConvertStringConvert_findFromStringMethodWithIOSClass_withNSString_(self, cls, methodName);
}

- (JavaLangReflectConstructor *)findFromStringConstructorByTypeWithIOSClass:(IOSClass *)cls {
  return OrgJodaConvertStringConvert_findFromStringConstructorByTypeWithIOSClass_(self, cls);
}

- (NSString *)description {
  return [[self getClass] getSimpleName];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgJodaConvertStringConvert;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 5, -1, 6, -1, -1 },
    { NULL, "LNSObject;", 0x1, 7, 8, -1, 9, -1, -1 },
    { NULL, "Z", 0x1, 10, 11, -1, 12, -1, -1 },
    { NULL, "LOrgJodaConvertStringConverter;", 0x1, 13, 11, -1, 14, -1, -1 },
    { NULL, "LOrgJodaConvertStringConverter;", 0x1, 15, 11, -1, 16, -1, -1 },
    { NULL, "LOrgJodaConvertTypedStringConverter;", 0x1, 17, 11, -1, 18, -1, -1 },
    { NULL, "LOrgJodaConvertTypedStringConverter;", 0x1, 19, 11, -1, 20, -1, -1 },
    { NULL, "LOrgJodaConvertTypedStringConverter;", 0x2, 21, 11, -1, 18, -1, -1 },
    { NULL, "LOrgJodaConvertTypedStringConverter;", 0x2, 22, 11, -1, 18, -1, -1 },
    { NULL, "V", 0x1, 23, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 26, -1, 27, -1, -1 },
    { NULL, "V", 0x1, 25, 28, -1, 29, -1, -1 },
    { NULL, "V", 0x1, 30, 31, -1, 32, -1, -1 },
    { NULL, "V", 0x1, 33, 8, -1, 34, -1, -1 },
    { NULL, "LJavaLangReflectMethod;", 0x2, 35, 8, -1, 36, -1, -1 },
    { NULL, "LJavaLangReflectMethod;", 0x2, 37, 8, -1, 36, -1, -1 },
    { NULL, "LJavaLangReflectConstructor;", 0x2, 38, 11, -1, 39, -1, -1 },
    { NULL, "LNSString;", 0x1, 40, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(create);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithBoolean:withOrgJodaConvertStringConverterFactoryArray:);
  methods[3].selector = @selector(tryRegisterGuava);
  methods[4].selector = @selector(tryRegisterWithNSString:withNSString:);
  methods[5].selector = @selector(convertToStringWithId:);
  methods[6].selector = @selector(convertToStringWithIOSClass:withId:);
  methods[7].selector = @selector(convertFromStringWithIOSClass:withNSString:);
  methods[8].selector = @selector(isConvertibleWithIOSClass:);
  methods[9].selector = @selector(findConverterWithIOSClass:);
  methods[10].selector = @selector(findConverterNoGenericsWithIOSClass:);
  methods[11].selector = @selector(findTypedConverterWithIOSClass:);
  methods[12].selector = @selector(findTypedConverterNoGenericsWithIOSClass:);
  methods[13].selector = @selector(findConverterQuietWithIOSClass:);
  methods[14].selector = @selector(findAnyConverterWithIOSClass:);
  methods[15].selector = @selector(registerFactoryWithOrgJodaConvertStringConverterFactory:);
  methods[16].selector = @selector(register__WithIOSClass:withOrgJodaConvertStringConverter:);
  methods[17].selector = @selector(register__WithIOSClass:withOrgJodaConvertToStringConverter:withOrgJodaConvertFromStringConverter:);
  methods[18].selector = @selector(registerMethodsWithIOSClass:withNSString:withNSString:);
  methods[19].selector = @selector(registerMethodConstructorWithIOSClass:withNSString:);
  methods[20].selector = @selector(findToStringMethodWithIOSClass:withNSString:);
  methods[21].selector = @selector(findFromStringMethodWithIOSClass:withNSString:);
  methods[22].selector = @selector(findFromStringConstructorByTypeWithIOSClass:);
  methods[23].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LOrgJodaConvertStringConvert;", .constantValue.asLong = 0, 0x19, -1, 41, -1, -1 },
    { "CACHED_NULL", "LOrgJodaConvertTypedStringConverter;", .constantValue.asLong = 0, 0x1a, -1, 42, 43, -1 },
    { "factories_", "LJavaUtilConcurrentCopyOnWriteArrayList;", .constantValue.asLong = 0, 0x12, -1, -1, 44, -1 },
    { "registered_", "LJavaUtilConcurrentConcurrentMap;", .constantValue.asLong = 0, 0x12, -1, -1, 45, -1 },
  };
  static const void *ptrTable[] = { "Z[LOrgJodaConvertStringConverterFactory;", "tryRegister", "LNSString;LNSString;", "convertToString", "LNSObject;", "LIOSClass;LNSObject;", "(Ljava/lang/Class<*>;Ljava/lang/Object;)Ljava/lang/String;", "convertFromString", "LIOSClass;LNSString;", "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;Ljava/lang/String;)TT;", "isConvertible", "LIOSClass;", "(Ljava/lang/Class<*>;)Z", "findConverter", "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;)Lorg/joda/convert/StringConverter<TT;>;", "findConverterNoGenerics", "(Ljava/lang/Class<*>;)Lorg/joda/convert/StringConverter<Ljava/lang/Object;>;", "findTypedConverter", "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;)Lorg/joda/convert/TypedStringConverter<TT;>;", "findTypedConverterNoGenerics", "(Ljava/lang/Class<*>;)Lorg/joda/convert/TypedStringConverter<Ljava/lang/Object;>;", "findConverterQuiet", "findAnyConverter", "registerFactory", "LOrgJodaConvertStringConverterFactory;", "register", "LIOSClass;LOrgJodaConvertStringConverter;", "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;Lorg/joda/convert/StringConverter<TT;>;)V", "LIOSClass;LOrgJodaConvertToStringConverter;LOrgJodaConvertFromStringConverter;", "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;Lorg/joda/convert/ToStringConverter<TT;>;Lorg/joda/convert/FromStringConverter<TT;>;)V", "registerMethods", "LIOSClass;LNSString;LNSString;", "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;Ljava/lang/String;Ljava/lang/String;)V", "registerMethodConstructor", "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;Ljava/lang/String;)V", "findToStringMethod", "(Ljava/lang/Class<*>;Ljava/lang/String;)Ljava/lang/reflect/Method;", "findFromStringMethod", "findFromStringConstructorByType", "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;)Ljava/lang/reflect/Constructor<TT;>;", "toString", &OrgJodaConvertStringConvert_INSTANCE, &OrgJodaConvertStringConvert_CACHED_NULL, "Lorg/joda/convert/TypedStringConverter<*>;", "Ljava/util/concurrent/CopyOnWriteArrayList<Lorg/joda/convert/StringConverterFactory;>;", "Ljava/util/concurrent/ConcurrentMap<Ljava/lang/Class<*>;Lorg/joda/convert/TypedStringConverter<*>;>;" };
  static const J2ObjcClassInfo _OrgJodaConvertStringConvert = { "StringConvert", "org.joda.convert", ptrTable, methods, fields, 7, 0x11, 24, 4, -1, -1, -1, -1, -1 };
  return &_OrgJodaConvertStringConvert;
}

+ (void)initialize {
  if (self == [OrgJodaConvertStringConvert class]) {
    OrgJodaConvertStringConvert_INSTANCE = new_OrgJodaConvertStringConvert_init();
    OrgJodaConvertStringConvert_CACHED_NULL = new_OrgJodaConvertStringConvert_$1_init();
    J2OBJC_SET_INITIALIZED(OrgJodaConvertStringConvert)
  }
}

@end

OrgJodaConvertStringConvert *OrgJodaConvertStringConvert_create() {
  OrgJodaConvertStringConvert_initialize();
  return new_OrgJodaConvertStringConvert_initWithBoolean_withOrgJodaConvertStringConverterFactoryArray_(true, [IOSObjectArray newArrayWithObjects:(id[]){ JreLoadStatic(OrgJodaConvertFactoryNumericArrayStringConverterFactory, INSTANCE), JreLoadStatic(OrgJodaConvertFactoryNumericObjectArrayStringConverterFactory, INSTANCE), JreLoadStatic(OrgJodaConvertFactoryCharObjectArrayStringConverterFactory, INSTANCE), JreLoadStatic(OrgJodaConvertFactoryByteObjectArrayStringConverterFactory, INSTANCE), JreLoadStatic(OrgJodaConvertFactoryBooleanArrayStringConverterFactory, INSTANCE), JreLoadStatic(OrgJodaConvertFactoryBooleanObjectArrayStringConverterFactory, INSTANCE) } count:6 type:OrgJodaConvertStringConverterFactory_class_()]);
}

void OrgJodaConvertStringConvert_init(OrgJodaConvertStringConvert *self) {
  OrgJodaConvertStringConvert_initWithBoolean_withOrgJodaConvertStringConverterFactoryArray_(self, true, [IOSObjectArray newArrayWithLength:0 type:OrgJodaConvertStringConverterFactory_class_()]);
}

OrgJodaConvertStringConvert *new_OrgJodaConvertStringConvert_init() {
  J2OBJC_NEW_IMPL(OrgJodaConvertStringConvert, init)
}

OrgJodaConvertStringConvert *create_OrgJodaConvertStringConvert_init() {
  J2OBJC_CREATE_IMPL(OrgJodaConvertStringConvert, init)
}

void OrgJodaConvertStringConvert_initWithBoolean_withOrgJodaConvertStringConverterFactoryArray_(OrgJodaConvertStringConvert *self, jboolean includeJdkConverters, IOSObjectArray *factories) {
  NSObject_init(self);
  self->factories_ = new_JavaUtilConcurrentCopyOnWriteArrayList_init();
  self->registered_ = new_JavaUtilConcurrentConcurrentHashMap_init();
  if (factories == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"StringConverterFactory array must not be null");
  }
  for (jint i = 0; i < factories->size_; i++) {
    if (IOSObjectArray_Get(factories, i) == nil) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"StringConverterFactory array must not contain a null element");
    }
  }
  if (includeJdkConverters) {
    {
      IOSObjectArray *a__ = OrgJodaConvertJDKStringConverter_values();
      OrgJodaConvertJDKStringConverter * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      OrgJodaConvertJDKStringConverter * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        OrgJodaConvertJDKStringConverter *conv = *b__++;
        (void) [self->registered_ putWithId:[((OrgJodaConvertJDKStringConverter *) nil_chk(conv)) getType] withId:conv];
      }
    }
    (void) [self->registered_ putWithId:JreLoadStatic(JavaLangBoolean, TYPE) withId:JreLoadEnum(OrgJodaConvertJDKStringConverter, BOOLEAN)];
    (void) [self->registered_ putWithId:JreLoadStatic(JavaLangByte, TYPE) withId:JreLoadEnum(OrgJodaConvertJDKStringConverter, BYTE)];
    (void) [self->registered_ putWithId:JreLoadStatic(JavaLangShort, TYPE) withId:JreLoadEnum(OrgJodaConvertJDKStringConverter, SHORT)];
    (void) [self->registered_ putWithId:JreLoadStatic(JavaLangInteger, TYPE) withId:JreLoadEnum(OrgJodaConvertJDKStringConverter, INTEGER)];
    (void) [self->registered_ putWithId:JreLoadStatic(JavaLangLong, TYPE) withId:JreLoadEnum(OrgJodaConvertJDKStringConverter, LONG)];
    (void) [self->registered_ putWithId:JreLoadStatic(JavaLangFloat, TYPE) withId:JreLoadEnum(OrgJodaConvertJDKStringConverter, FLOAT)];
    (void) [self->registered_ putWithId:JreLoadStatic(JavaLangDouble, TYPE) withId:JreLoadEnum(OrgJodaConvertJDKStringConverter, DOUBLE)];
    (void) [self->registered_ putWithId:JreLoadStatic(JavaLangCharacter, TYPE) withId:JreLoadEnum(OrgJodaConvertJDKStringConverter, CHARACTER)];
    OrgJodaConvertStringConvert_tryRegisterGuava(self);
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"java.time.Instant", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"java.time.Duration", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"java.time.LocalDate", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"java.time.LocalTime", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"java.time.LocalDateTime", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"java.time.OffsetTime", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"java.time.OffsetDateTime", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"java.time.ZonedDateTime", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"java.time.Year", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"java.time.YearMonth", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"java.time.MonthDay", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"java.time.Period", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"java.time.ZoneOffset", @"of");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"java.time.ZoneId", @"of");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"org.threeten.bp.Instant", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"org.threeten.bp.Duration", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"org.threeten.bp.LocalDate", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"org.threeten.bp.LocalTime", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"org.threeten.bp.LocalDateTime", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"org.threeten.bp.OffsetTime", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"org.threeten.bp.OffsetDateTime", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"org.threeten.bp.ZonedDateTime", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"org.threeten.bp.Year", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"org.threeten.bp.YearMonth", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"org.threeten.bp.MonthDay", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"org.threeten.bp.Period", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"org.threeten.bp.ZoneOffset", @"of");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"org.threeten.bp.ZoneId", @"of");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"javax.time.Instant", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"javax.time.Duration", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"javax.time.calendar.LocalDate", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"javax.time.calendar.LocalTime", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"javax.time.calendar.LocalDateTime", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"javax.time.calendar.OffsetDate", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"javax.time.calendar.OffsetTime", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"javax.time.calendar.OffsetDateTime", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"javax.time.calendar.ZonedDateTime", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"javax.time.calendar.Year", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"javax.time.calendar.YearMonth", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"javax.time.calendar.MonthDay", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"javax.time.calendar.Period", @"parse");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"javax.time.calendar.ZoneOffset", @"of");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"javax.time.calendar.ZoneId", @"of");
    OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(self, @"javax.time.calendar.TimeZone", @"of");
  }
  if (factories->size_ > 0) {
    [self->factories_ addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_(factories)];
  }
  [self->factories_ addWithId:JreLoadStatic(OrgJodaConvertAnnotationStringConverterFactory, INSTANCE)];
  if (includeJdkConverters) {
    [self->factories_ addWithId:JreLoadStatic(OrgJodaConvertEnumStringConverterFactory, INSTANCE)];
  }
}

OrgJodaConvertStringConvert *new_OrgJodaConvertStringConvert_initWithBoolean_withOrgJodaConvertStringConverterFactoryArray_(jboolean includeJdkConverters, IOSObjectArray *factories) {
  J2OBJC_NEW_IMPL(OrgJodaConvertStringConvert, initWithBoolean_withOrgJodaConvertStringConverterFactoryArray_, includeJdkConverters, factories)
}

OrgJodaConvertStringConvert *create_OrgJodaConvertStringConvert_initWithBoolean_withOrgJodaConvertStringConverterFactoryArray_(jboolean includeJdkConverters, IOSObjectArray *factories) {
  J2OBJC_CREATE_IMPL(OrgJodaConvertStringConvert, initWithBoolean_withOrgJodaConvertStringConverterFactoryArray_, includeJdkConverters, factories)
}

void OrgJodaConvertStringConvert_tryRegisterGuava(OrgJodaConvertStringConvert *self) {
  @try {
    IOSClass *cls = [((OrgJodaConvertRenameHandler *) nil_chk(JreLoadStatic(OrgJodaConvertRenameHandler, INSTANCE))) loadTypeWithNSString:@"org.joda.convert.TypeTokenStringConverter"];
    id<OrgJodaConvertTypedStringConverter> conv = (id<OrgJodaConvertTypedStringConverter>) cast_check([((IOSClass *) nil_chk(cls)) newInstance], OrgJodaConvertTypedStringConverter_class_());
    (void) [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(self->registered_)) putWithId:[((id<OrgJodaConvertTypedStringConverter>) nil_chk(conv)) getEffectiveType] withId:conv];
    IOSClass *cls2 = [JreLoadStatic(OrgJodaConvertRenameHandler, INSTANCE) loadTypeWithNSString:@"org.joda.convert.TypeStringConverter"];
    id<OrgJodaConvertTypedStringConverter> conv2 = (id<OrgJodaConvertTypedStringConverter>) cast_check([((IOSClass *) nil_chk(cls2)) newInstance], OrgJodaConvertTypedStringConverter_class_());
    (void) [self->registered_ putWithId:[((id<OrgJodaConvertTypedStringConverter>) nil_chk(conv2)) getEffectiveType] withId:conv2];
  }
  @catch (JavaLangException *ex) {
  }
}

void OrgJodaConvertStringConvert_tryRegisterWithNSString_withNSString_(OrgJodaConvertStringConvert *self, NSString *className_, NSString *fromStringMethodName) {
  @try {
    IOSClass *cls = [((OrgJodaConvertRenameHandler *) nil_chk(JreLoadStatic(OrgJodaConvertRenameHandler, INSTANCE))) lookupTypeWithNSString:className_];
    [self registerMethodsWithIOSClass:cls withNSString:@"toString" withNSString:fromStringMethodName];
  }
  @catch (JavaLangException *ex) {
  }
}

id<OrgJodaConvertTypedStringConverter> OrgJodaConvertStringConvert_findConverterQuietWithIOSClass_(OrgJodaConvertStringConvert *self, IOSClass *cls) {
  if (cls == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"Class must not be null");
  }
  id<OrgJodaConvertTypedStringConverter> conv = [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(self->registered_)) getWithId:cls];
  if (conv == OrgJodaConvertStringConvert_CACHED_NULL) {
    return nil;
  }
  if (conv == nil) {
    @try {
      conv = OrgJodaConvertStringConvert_findAnyConverterWithIOSClass_(self, cls);
    }
    @catch (JavaLangRuntimeException *ex) {
      (void) [self->registered_ putIfAbsentWithId:cls withId:OrgJodaConvertStringConvert_CACHED_NULL];
      @throw ex;
    }
    if (conv == nil) {
      (void) [self->registered_ putIfAbsentWithId:cls withId:OrgJodaConvertStringConvert_CACHED_NULL];
      return nil;
    }
    (void) [self->registered_ putIfAbsentWithId:cls withId:conv];
  }
  return conv;
}

id<OrgJodaConvertTypedStringConverter> OrgJodaConvertStringConvert_findAnyConverterWithIOSClass_(OrgJodaConvertStringConvert *self, IOSClass *cls) {
  id<OrgJodaConvertTypedStringConverter> conv = nil;
  IOSClass *loopCls = [((IOSClass *) nil_chk(cls)) getSuperclass];
  while (loopCls != nil && conv == nil) {
    conv = [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(self->registered_)) getWithId:loopCls];
    if (conv != nil && conv != OrgJodaConvertStringConvert_CACHED_NULL) {
      return conv;
    }
    loopCls = [loopCls getSuperclass];
  }
  {
    IOSObjectArray *a__ = [cls getInterfaces];
    IOSClass * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    IOSClass * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      IOSClass *loopIfc = *b__++;
      conv = [((id<JavaUtilConcurrentConcurrentMap>) nil_chk(self->registered_)) getWithId:loopIfc];
      if (conv != nil && conv != OrgJodaConvertStringConvert_CACHED_NULL) {
        return conv;
      }
    }
  }
  for (id<OrgJodaConvertStringConverterFactory> __strong factory in nil_chk(self->factories_)) {
    id<OrgJodaConvertStringConverter> factoryConv = [((id<OrgJodaConvertStringConverterFactory>) nil_chk(factory)) findConverterWithIOSClass:cls];
    if (factoryConv != nil) {
      return OrgJodaConvertTypedAdapter_adaptWithIOSClass_withOrgJodaConvertStringConverter_(cls, factoryConv);
    }
  }
  return nil;
}

JavaLangReflectMethod *OrgJodaConvertStringConvert_findToStringMethodWithIOSClass_withNSString_(OrgJodaConvertStringConvert *self, IOSClass *cls, NSString *methodName) {
  JavaLangReflectMethod *m;
  @try {
    m = [((IOSClass *) nil_chk(cls)) getMethod:methodName parameterTypes:[IOSObjectArray newArrayWithLength:0 type:IOSClass_class_()]];
  }
  @catch (JavaLangNoSuchMethodException *ex) {
    @throw new_JavaLangIllegalArgumentException_initWithNSException_(ex);
  }
  if (JavaLangReflectModifier_isStaticWithInt_([((JavaLangReflectMethod *) nil_chk(m)) getModifiers])) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Method must not be static: ", methodName));
  }
  return m;
}

JavaLangReflectMethod *OrgJodaConvertStringConvert_findFromStringMethodWithIOSClass_withNSString_(OrgJodaConvertStringConvert *self, IOSClass *cls, NSString *methodName) {
  JavaLangReflectMethod *m;
  @try {
    m = [((IOSClass *) nil_chk(cls)) getMethod:methodName parameterTypes:[IOSObjectArray newArrayWithObjects:(id[]){ NSString_class_() } count:1 type:IOSClass_class_()]];
  }
  @catch (JavaLangNoSuchMethodException *ex) {
    @try {
      m = [cls getMethod:methodName parameterTypes:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangCharSequence_class_() } count:1 type:IOSClass_class_()]];
    }
    @catch (JavaLangNoSuchMethodException *ex2) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_withNSException_(@"Method not found", ex2);
    }
  }
  if (JavaLangReflectModifier_isStaticWithInt_([((JavaLangReflectMethod *) nil_chk(m)) getModifiers]) == false) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Method must be static: ", methodName));
  }
  return m;
}

JavaLangReflectConstructor *OrgJodaConvertStringConvert_findFromStringConstructorByTypeWithIOSClass_(OrgJodaConvertStringConvert *self, IOSClass *cls) {
  @try {
    return [((IOSClass *) nil_chk(cls)) getDeclaredConstructor:[IOSObjectArray newArrayWithObjects:(id[]){ NSString_class_() } count:1 type:IOSClass_class_()]];
  }
  @catch (JavaLangNoSuchMethodException *ex) {
    @try {
      return [cls getDeclaredConstructor:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangCharSequence_class_() } count:1 type:IOSClass_class_()]];
    }
    @catch (JavaLangNoSuchMethodException *ex2) {
      @throw new_JavaLangIllegalArgumentException_initWithNSString_withNSException_(@"Constructor not found", ex2);
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaConvertStringConvert)

@implementation OrgJodaConvertStringConvert_$1

- (NSString *)convertToStringWithId:(id)object {
  return nil;
}

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  return nil;
}

- (IOSClass *)getEffectiveType {
  return nil;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJodaConvertStringConvert_$1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(convertToStringWithId:);
  methods[1].selector = @selector(convertFromStringWithIOSClass:withNSString:);
  methods[2].selector = @selector(getEffectiveType);
  methods[3].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertToString", "LNSObject;", "convertFromString", "LIOSClass;LNSString;", "(Ljava/lang/Class<+Ljava/lang/Object;>;Ljava/lang/String;)Ljava/lang/Object;", "()Ljava/lang/Class<*>;", "LOrgJodaConvertStringConvert;", "Ljava/lang/Object;Lorg/joda/convert/TypedStringConverter<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _OrgJodaConvertStringConvert_$1 = { "", "org.joda.convert", ptrTable, methods, NULL, 7, 0x8008, 4, 0, 6, -1, -1, 7, -1 };
  return &_OrgJodaConvertStringConvert_$1;
}

@end

void OrgJodaConvertStringConvert_$1_init(OrgJodaConvertStringConvert_$1 *self) {
  NSObject_init(self);
}

OrgJodaConvertStringConvert_$1 *new_OrgJodaConvertStringConvert_$1_init() {
  J2OBJC_NEW_IMPL(OrgJodaConvertStringConvert_$1, init)
}

OrgJodaConvertStringConvert_$1 *create_OrgJodaConvertStringConvert_$1_init() {
  J2OBJC_CREATE_IMPL(OrgJodaConvertStringConvert_$1, init)
}

@implementation OrgJodaConvertStringConvert_$2

- (NSString *)convertToStringWithId:(id)object {
  return [((id<OrgJodaConvertToStringConverter>) nil_chk(val$toString_)) convertToStringWithId:object];
}

- (id)convertFromStringWithIOSClass:(IOSClass *)cls
                       withNSString:(NSString *)str {
  return [((id<OrgJodaConvertFromStringConverter>) nil_chk(val$fromString_)) convertFromStringWithIOSClass:cls withNSString:str];
}

- (IOSClass *)getEffectiveType {
  return val$cls_;
}

- (instancetype)initWithOrgJodaConvertToStringConverter:(id<OrgJodaConvertToStringConverter>)capture$0
                  withOrgJodaConvertFromStringConverter:(id<OrgJodaConvertFromStringConverter>)capture$1
                                           withIOSClass:(IOSClass *)capture$2 {
  OrgJodaConvertStringConvert_$2_initWithOrgJodaConvertToStringConverter_withOrgJodaConvertFromStringConverter_withIOSClass_(self, capture$0, capture$1, capture$2);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, NULL, 0x0, -1, 7, -1, 8, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(convertToStringWithId:);
  methods[1].selector = @selector(convertFromStringWithIOSClass:withNSString:);
  methods[2].selector = @selector(getEffectiveType);
  methods[3].selector = @selector(initWithOrgJodaConvertToStringConverter:withOrgJodaConvertFromStringConverter:withIOSClass:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$toString_", "LOrgJodaConvertToStringConverter;", .constantValue.asLong = 0, 0x1012, -1, -1, 9, -1 },
    { "val$fromString_", "LOrgJodaConvertFromStringConverter;", .constantValue.asLong = 0, 0x1012, -1, -1, 10, -1 },
    { "val$cls_", "LIOSClass;", .constantValue.asLong = 0, 0x1012, -1, -1, 11, -1 },
  };
  static const void *ptrTable[] = { "convertToString", "LNSObject;", "(TT;)Ljava/lang/String;", "convertFromString", "LIOSClass;LNSString;", "(Ljava/lang/Class<+TT;>;Ljava/lang/String;)TT;", "()Ljava/lang/Class<*>;", "LOrgJodaConvertToStringConverter;LOrgJodaConvertFromStringConverter;LIOSClass;", "(Lorg/joda/convert/ToStringConverter<TT;>;Lorg/joda/convert/FromStringConverter<TT;>;Ljava/lang/Class<TT;>;)V", "Lorg/joda/convert/ToStringConverter<TT;>;", "Lorg/joda/convert/FromStringConverter<TT;>;", "Ljava/lang/Class<TT;>;", "LOrgJodaConvertStringConvert;", "register__WithIOSClass:withOrgJodaConvertToStringConverter:withOrgJodaConvertFromStringConverter:", "Ljava/lang/Object;Lorg/joda/convert/TypedStringConverter<TT;>;" };
  static const J2ObjcClassInfo _OrgJodaConvertStringConvert_$2 = { "", "org.joda.convert", ptrTable, methods, fields, 7, 0x8008, 4, 3, 12, -1, 13, 14, -1 };
  return &_OrgJodaConvertStringConvert_$2;
}

@end

void OrgJodaConvertStringConvert_$2_initWithOrgJodaConvertToStringConverter_withOrgJodaConvertFromStringConverter_withIOSClass_(OrgJodaConvertStringConvert_$2 *self, id<OrgJodaConvertToStringConverter> capture$0, id<OrgJodaConvertFromStringConverter> capture$1, IOSClass *capture$2) {
  self->val$toString_ = capture$0;
  self->val$fromString_ = capture$1;
  self->val$cls_ = capture$2;
  NSObject_init(self);
}

OrgJodaConvertStringConvert_$2 *new_OrgJodaConvertStringConvert_$2_initWithOrgJodaConvertToStringConverter_withOrgJodaConvertFromStringConverter_withIOSClass_(id<OrgJodaConvertToStringConverter> capture$0, id<OrgJodaConvertFromStringConverter> capture$1, IOSClass *capture$2) {
  J2OBJC_NEW_IMPL(OrgJodaConvertStringConvert_$2, initWithOrgJodaConvertToStringConverter_withOrgJodaConvertFromStringConverter_withIOSClass_, capture$0, capture$1, capture$2)
}

OrgJodaConvertStringConvert_$2 *create_OrgJodaConvertStringConvert_$2_initWithOrgJodaConvertToStringConverter_withOrgJodaConvertFromStringConverter_withIOSClass_(id<OrgJodaConvertToStringConverter> capture$0, id<OrgJodaConvertFromStringConverter> capture$1, IOSClass *capture$2) {
  J2OBJC_CREATE_IMPL(OrgJodaConvertStringConvert_$2, initWithOrgJodaConvertToStringConverter_withOrgJodaConvertFromStringConverter_withIOSClass_, capture$0, capture$1, capture$2)
}
