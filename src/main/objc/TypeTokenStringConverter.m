//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/eric/repos/360-j2objc/joda-convert/build/mainTranslationExtraction/org/joda/convert/TypeTokenStringConverter.java
//

#include "AbstractTypeStringConverter.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "TypeTokenStringConverter.h"
#include "com/google/common/reflect/TypeToken.h"
#include "java/lang/reflect/Type.h"

@implementation OrgJodaConvertTypeTokenStringConverter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJodaConvertTypeTokenStringConverter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)convertToStringWithId:(ComGoogleCommonReflectTypeToken *)object {
  return [((ComGoogleCommonReflectTypeToken *) nil_chk(object)) description];
}

- (ComGoogleCommonReflectTypeToken *)convertFromStringWithIOSClass:(IOSClass *)cls
                                                      withNSString:(NSString *)str {
  return ComGoogleCommonReflectTypeToken_ofWithJavaLangReflectType_(OrgJodaConvertAbstractTypeStringConverter_parseWithNSString_(str));
}

- (IOSClass *)getEffectiveType {
  return ComGoogleCommonReflectTypeToken_class_();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "LComGoogleCommonReflectTypeToken;", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(convertToStringWithId:);
  methods[2].selector = @selector(convertFromStringWithIOSClass:withNSString:);
  methods[3].selector = @selector(getEffectiveType);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertToString", "LComGoogleCommonReflectTypeToken;", "(Lcom/google/common/reflect/TypeToken<*>;)Ljava/lang/String;", "convertFromString", "LIOSClass;LNSString;", "(Ljava/lang/Class<+Lcom/google/common/reflect/TypeToken<*>;>;Ljava/lang/String;)Lcom/google/common/reflect/TypeToken<*>;", "()Ljava/lang/Class<*>;", "Lorg/joda/convert/AbstractTypeStringConverter;Lorg/joda/convert/TypedStringConverter<Lcom/google/common/reflect/TypeToken<*>;>;" };
  static const J2ObjcClassInfo _OrgJodaConvertTypeTokenStringConverter = { "TypeTokenStringConverter", "org.joda.convert", ptrTable, methods, NULL, 7, 0x10, 4, 0, -1, -1, -1, 7, -1 };
  return &_OrgJodaConvertTypeTokenStringConverter;
}

@end

void OrgJodaConvertTypeTokenStringConverter_init(OrgJodaConvertTypeTokenStringConverter *self) {
  OrgJodaConvertAbstractTypeStringConverter_init(self);
}

OrgJodaConvertTypeTokenStringConverter *new_OrgJodaConvertTypeTokenStringConverter_init() {
  J2OBJC_NEW_IMPL(OrgJodaConvertTypeTokenStringConverter, init)
}

OrgJodaConvertTypeTokenStringConverter *create_OrgJodaConvertTypeTokenStringConverter_init() {
  J2OBJC_CREATE_IMPL(OrgJodaConvertTypeTokenStringConverter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaConvertTypeTokenStringConverter)
