//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/eric/repos/360-j2objc/joda-convert/build/mainTranslationExtraction/org/joda/convert/AbstractTypeStringConverter.java
//

#include "AbstractTypeStringConverter.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RenameHandler.h"
#include "com/google/common/collect/ImmutableMap.h"
#include "java/lang/Exception.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/reflect/Array.h"
#include "java/lang/reflect/Method.h"
#include "java/lang/reflect/ParameterizedType.h"
#include "java/lang/reflect/Type.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@interface OrgJodaConvertAbstractTypeStringConverter ()

+ (id<JavaLangReflectType>)doParseWithNSString:(NSString *)str;

+ (id<JavaUtilList>)splitWithNSString:(NSString *)str;

+ (id<JavaLangReflectType>)wildExtendsTypeWithJavaLangReflectType:(id<JavaLangReflectType>)bound;

+ (id<JavaLangReflectType>)wildSuperTypeWithJavaLangReflectType:(id<JavaLangReflectType>)bound;

+ (id<JavaLangReflectParameterizedType>)newParameterizedTypeWithIOSClass:(IOSClass *)base
                                            withJavaLangReflectTypeArray:(IOSObjectArray *)args OBJC_METHOD_FAMILY_NONE;

@end

inline NSString *OrgJodaConvertAbstractTypeStringConverter_get_EXTENDS();
static NSString *OrgJodaConvertAbstractTypeStringConverter_EXTENDS = @"? extends ";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaConvertAbstractTypeStringConverter, EXTENDS, NSString *)

inline NSString *OrgJodaConvertAbstractTypeStringConverter_get_SUPER();
static NSString *OrgJodaConvertAbstractTypeStringConverter_SUPER = @"? super ";
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaConvertAbstractTypeStringConverter, SUPER, NSString *)

inline ComGoogleCommonCollectImmutableMap *OrgJodaConvertAbstractTypeStringConverter_get_PRIMITIVES();
static ComGoogleCommonCollectImmutableMap *OrgJodaConvertAbstractTypeStringConverter_PRIMITIVES;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaConvertAbstractTypeStringConverter, PRIMITIVES, ComGoogleCommonCollectImmutableMap *)

inline JavaLangReflectMethod *OrgJodaConvertAbstractTypeStringConverter_get_NEW_PARAM_TYPE();
static JavaLangReflectMethod *OrgJodaConvertAbstractTypeStringConverter_NEW_PARAM_TYPE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaConvertAbstractTypeStringConverter, NEW_PARAM_TYPE, JavaLangReflectMethod *)

inline JavaLangReflectMethod *OrgJodaConvertAbstractTypeStringConverter_get_EXTENDS_TYPE();
static JavaLangReflectMethod *OrgJodaConvertAbstractTypeStringConverter_EXTENDS_TYPE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaConvertAbstractTypeStringConverter, EXTENDS_TYPE, JavaLangReflectMethod *)

inline JavaLangReflectMethod *OrgJodaConvertAbstractTypeStringConverter_get_SUPER_TYPE();
static JavaLangReflectMethod *OrgJodaConvertAbstractTypeStringConverter_SUPER_TYPE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJodaConvertAbstractTypeStringConverter, SUPER_TYPE, JavaLangReflectMethod *)

__attribute__((unused)) static id<JavaLangReflectType> OrgJodaConvertAbstractTypeStringConverter_doParseWithNSString_(NSString *str);

__attribute__((unused)) static id<JavaUtilList> OrgJodaConvertAbstractTypeStringConverter_splitWithNSString_(NSString *str);

__attribute__((unused)) static id<JavaLangReflectType> OrgJodaConvertAbstractTypeStringConverter_wildExtendsTypeWithJavaLangReflectType_(id<JavaLangReflectType> bound);

__attribute__((unused)) static id<JavaLangReflectType> OrgJodaConvertAbstractTypeStringConverter_wildSuperTypeWithJavaLangReflectType_(id<JavaLangReflectType> bound);

__attribute__((unused)) static id<JavaLangReflectParameterizedType> OrgJodaConvertAbstractTypeStringConverter_newParameterizedTypeWithIOSClass_withJavaLangReflectTypeArray_(IOSClass *base, IOSObjectArray *args);

J2OBJC_INITIALIZED_DEFN(OrgJodaConvertAbstractTypeStringConverter)

@implementation OrgJodaConvertAbstractTypeStringConverter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJodaConvertAbstractTypeStringConverter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id<JavaLangReflectType>)parseWithNSString:(NSString *)str {
  return OrgJodaConvertAbstractTypeStringConverter_parseWithNSString_(str);
}

+ (id<JavaLangReflectType>)doParseWithNSString:(NSString *)str {
  return OrgJodaConvertAbstractTypeStringConverter_doParseWithNSString_(str);
}

+ (id<JavaUtilList>)splitWithNSString:(NSString *)str {
  return OrgJodaConvertAbstractTypeStringConverter_splitWithNSString_(str);
}

+ (id<JavaLangReflectType>)wildExtendsTypeWithJavaLangReflectType:(id<JavaLangReflectType>)bound {
  return OrgJodaConvertAbstractTypeStringConverter_wildExtendsTypeWithJavaLangReflectType_(bound);
}

+ (id<JavaLangReflectType>)wildSuperTypeWithJavaLangReflectType:(id<JavaLangReflectType>)bound {
  return OrgJodaConvertAbstractTypeStringConverter_wildSuperTypeWithJavaLangReflectType_(bound);
}

+ (id<JavaLangReflectParameterizedType>)newParameterizedTypeWithIOSClass:(IOSClass *)base
                                            withJavaLangReflectTypeArray:(IOSObjectArray *)args {
  return OrgJodaConvertAbstractTypeStringConverter_newParameterizedTypeWithIOSClass_withJavaLangReflectTypeArray_(base, args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0xa, 2, 1, 3, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0xa, 4, 1, -1, 5, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0xa, 6, 7, 3, -1, -1, -1 },
    { NULL, "LJavaLangReflectType;", 0xa, 8, 7, 3, -1, -1, -1 },
    { NULL, "LJavaLangReflectParameterizedType;", 0x8a, 9, 10, 3, 11, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(parseWithNSString:);
  methods[2].selector = @selector(doParseWithNSString:);
  methods[3].selector = @selector(splitWithNSString:);
  methods[4].selector = @selector(wildExtendsTypeWithJavaLangReflectType:);
  methods[5].selector = @selector(wildSuperTypeWithJavaLangReflectType:);
  methods[6].selector = @selector(newParameterizedTypeWithIOSClass:withJavaLangReflectTypeArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EXTENDS", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
    { "SUPER", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 13, -1, -1 },
    { "PRIMITIVES", "LComGoogleCommonCollectImmutableMap;", .constantValue.asLong = 0, 0x1a, -1, 14, 15, -1 },
    { "NEW_PARAM_TYPE", "LJavaLangReflectMethod;", .constantValue.asLong = 0, 0x1a, -1, 16, -1, -1 },
    { "EXTENDS_TYPE", "LJavaLangReflectMethod;", .constantValue.asLong = 0, 0x1a, -1, 17, -1, -1 },
    { "SUPER_TYPE", "LJavaLangReflectMethod;", .constantValue.asLong = 0, 0x1a, -1, 18, -1, -1 },
  };
  static const void *ptrTable[] = { "parse", "LNSString;", "doParse", "LJavaLangException;", "split", "(Ljava/lang/String;)Ljava/util/List<Ljava/lang/String;>;", "wildExtendsType", "LJavaLangReflectType;", "wildSuperType", "newParameterizedType", "LIOSClass;[LJavaLangReflectType;", "(Ljava/lang/Class<*>;[Ljava/lang/reflect/Type;)Ljava/lang/reflect/ParameterizedType;", &OrgJodaConvertAbstractTypeStringConverter_EXTENDS, &OrgJodaConvertAbstractTypeStringConverter_SUPER, &OrgJodaConvertAbstractTypeStringConverter_PRIMITIVES, "Lcom/google/common/collect/ImmutableMap<Ljava/lang/String;Ljava/lang/Class<*>;>;", &OrgJodaConvertAbstractTypeStringConverter_NEW_PARAM_TYPE, &OrgJodaConvertAbstractTypeStringConverter_EXTENDS_TYPE, &OrgJodaConvertAbstractTypeStringConverter_SUPER_TYPE };
  static const J2ObjcClassInfo _OrgJodaConvertAbstractTypeStringConverter = { "AbstractTypeStringConverter", "org.joda.convert", ptrTable, methods, fields, 7, 0x400, 7, 6, -1, -1, -1, -1, -1 };
  return &_OrgJodaConvertAbstractTypeStringConverter;
}

+ (void)initialize {
  if (self == [OrgJodaConvertAbstractTypeStringConverter class]) {
    OrgJodaConvertAbstractTypeStringConverter_PRIMITIVES = [((ComGoogleCommonCollectImmutableMap_Builder *) nil_chk([((ComGoogleCommonCollectImmutableMap_Builder *) nil_chk([((ComGoogleCommonCollectImmutableMap_Builder *) nil_chk([((ComGoogleCommonCollectImmutableMap_Builder *) nil_chk([((ComGoogleCommonCollectImmutableMap_Builder *) nil_chk([((ComGoogleCommonCollectImmutableMap_Builder *) nil_chk([((ComGoogleCommonCollectImmutableMap_Builder *) nil_chk([((ComGoogleCommonCollectImmutableMap_Builder *) nil_chk([((ComGoogleCommonCollectImmutableMap_Builder *) nil_chk(ComGoogleCommonCollectImmutableMap_builder())) putWithId:@"byte" withId:[IOSClass byteClass]])) putWithId:@"short" withId:[IOSClass shortClass]])) putWithId:@"int" withId:[IOSClass intClass]])) putWithId:@"long" withId:[IOSClass longClass]])) putWithId:@"boolean" withId:[IOSClass booleanClass]])) putWithId:@"char" withId:[IOSClass charClass]])) putWithId:@"float" withId:[IOSClass floatClass]])) putWithId:@"double" withId:[IOSClass doubleClass]])) build];
    {
      @try {
        IOSClass *typesClass = [((OrgJodaConvertRenameHandler *) nil_chk(JreLoadStatic(OrgJodaConvertRenameHandler, INSTANCE))) loadTypeWithNSString:@"com.google.common.reflect.Types"];
        JavaLangReflectMethod *newParam = [((IOSClass *) nil_chk(typesClass)) getDeclaredMethod:@"newParameterizedType" parameterTypes:[IOSObjectArray newArrayWithObjects:(id[]){ IOSClass_class_(), IOSClass_arrayType(JavaLangReflectType_class_(), 1) } count:2 type:IOSClass_class_()]];
        [((JavaLangReflectMethod *) nil_chk(newParam)) setAccessibleWithBoolean:true];
        OrgJodaConvertAbstractTypeStringConverter_NEW_PARAM_TYPE = newParam;
        JavaLangReflectMethod *extendsType = [typesClass getDeclaredMethod:@"subtypeOf" parameterTypes:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangReflectType_class_() } count:1 type:IOSClass_class_()]];
        [((JavaLangReflectMethod *) nil_chk(extendsType)) setAccessibleWithBoolean:true];
        OrgJodaConvertAbstractTypeStringConverter_EXTENDS_TYPE = extendsType;
        JavaLangReflectMethod *superType = [typesClass getDeclaredMethod:@"supertypeOf" parameterTypes:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangReflectType_class_() } count:1 type:IOSClass_class_()]];
        [((JavaLangReflectMethod *) nil_chk(superType)) setAccessibleWithBoolean:true];
        OrgJodaConvertAbstractTypeStringConverter_SUPER_TYPE = superType;
      }
      @catch (JavaLangException *ex) {
        @throw new_JavaLangRuntimeException_initWithNSException_(ex);
      }
    }
    J2OBJC_SET_INITIALIZED(OrgJodaConvertAbstractTypeStringConverter)
  }
}

@end

void OrgJodaConvertAbstractTypeStringConverter_init(OrgJodaConvertAbstractTypeStringConverter *self) {
  NSObject_init(self);
}

id<JavaLangReflectType> OrgJodaConvertAbstractTypeStringConverter_parseWithNSString_(NSString *str) {
  OrgJodaConvertAbstractTypeStringConverter_initialize();
  @try {
    return OrgJodaConvertAbstractTypeStringConverter_doParseWithNSString_(str);
  }
  @catch (JavaLangRuntimeException *ex) {
    @throw ex;
  }
  @catch (JavaLangException *ex) {
    @throw new_JavaLangRuntimeException_initWithNSException_(ex);
  }
}

id<JavaLangReflectType> OrgJodaConvertAbstractTypeStringConverter_doParseWithNSString_(NSString *str) {
  OrgJodaConvertAbstractTypeStringConverter_initialize();
  IOSClass *token = [((ComGoogleCommonCollectImmutableMap *) nil_chk(OrgJodaConvertAbstractTypeStringConverter_PRIMITIVES)) getWithId:str];
  if (token != nil) {
    return token;
  }
  jint first = [((NSString *) nil_chk(str)) indexOf:'<'];
  if (first < 0) {
    return [((OrgJodaConvertRenameHandler *) nil_chk(JreLoadStatic(OrgJodaConvertRenameHandler, INSTANCE))) loadTypeWithNSString:str];
  }
  jint last = [str lastIndexOf:'>'];
  NSString *baseStr = [str substring:0 endIndex:first];
  IOSClass *base = [((OrgJodaConvertRenameHandler *) nil_chk(JreLoadStatic(OrgJodaConvertRenameHandler, INSTANCE))) loadTypeWithNSString:baseStr];
  NSString *argsStr = [str substring:first + 1 endIndex:last];
  id<JavaUtilList> splitArgs = OrgJodaConvertAbstractTypeStringConverter_splitWithNSString_(argsStr);
  id<JavaUtilList> types = new_JavaUtilArrayList_init();
  for (NSString * __strong splitArg in nil_chk(splitArgs)) {
    id<JavaLangReflectType> argType;
    if ([((NSString *) nil_chk(splitArg)) hasPrefix:OrgJodaConvertAbstractTypeStringConverter_EXTENDS]) {
      NSString *remainder = [splitArg substring:((jint) [((NSString *) nil_chk(OrgJodaConvertAbstractTypeStringConverter_EXTENDS)) length])];
      argType = OrgJodaConvertAbstractTypeStringConverter_wildExtendsTypeWithJavaLangReflectType_(OrgJodaConvertAbstractTypeStringConverter_doParseWithNSString_(remainder));
    }
    else if ([splitArg hasPrefix:OrgJodaConvertAbstractTypeStringConverter_SUPER]) {
      NSString *remainder = [splitArg substring:((jint) [((NSString *) nil_chk(OrgJodaConvertAbstractTypeStringConverter_SUPER)) length])];
      argType = OrgJodaConvertAbstractTypeStringConverter_wildSuperTypeWithJavaLangReflectType_(OrgJodaConvertAbstractTypeStringConverter_doParseWithNSString_(remainder));
    }
    else if ([splitArg isEqual:@"?"]) {
      argType = OrgJodaConvertAbstractTypeStringConverter_wildExtendsTypeWithJavaLangReflectType_(NSObject_class_());
    }
    else if ([splitArg hasSuffix:@"[]"]) {
      NSString *componentStr = [splitArg substring:0 endIndex:((jint) [splitArg length]) - 2];
      IOSClass *componentCls = [JreLoadStatic(OrgJodaConvertRenameHandler, INSTANCE) loadTypeWithNSString:componentStr];
      argType = [nil_chk(JavaLangReflectArray_newInstanceWithIOSClass_withInt_(componentCls, 0)) getClass];
    }
    else if ([splitArg hasPrefix:@"[L"] && [splitArg hasSuffix:@";"]) {
      NSString *componentStr = [splitArg substring:2 endIndex:((jint) [splitArg length]) - 1];
      IOSClass *componentCls = [JreLoadStatic(OrgJodaConvertRenameHandler, INSTANCE) loadTypeWithNSString:componentStr];
      argType = [nil_chk(JavaLangReflectArray_newInstanceWithIOSClass_withInt_(componentCls, 0)) getClass];
    }
    else {
      argType = OrgJodaConvertAbstractTypeStringConverter_doParseWithNSString_(splitArg);
    }
    [types addWithId:argType];
  }
  return OrgJodaConvertAbstractTypeStringConverter_newParameterizedTypeWithIOSClass_withJavaLangReflectTypeArray_(base, [types toArrayWithNSObjectArray:[IOSObjectArray newArrayWithLength:[types size] type:JavaLangReflectType_class_()]]);
}

id<JavaUtilList> OrgJodaConvertAbstractTypeStringConverter_splitWithNSString_(NSString *str) {
  OrgJodaConvertAbstractTypeStringConverter_initialize();
  id<JavaUtilList> result = new_JavaUtilArrayList_init();
  jint genericCount = 0;
  jint startPos = 0;
  for (jint i = 0; i < ((jint) [((NSString *) nil_chk(str)) length]); i++) {
    if ([str charAtWithInt:i] == ',' && genericCount == 0) {
      [result addWithId:[((NSString *) nil_chk([str substring:startPos endIndex:i])) trim]];
      startPos = i + 1;
    }
    else if ([str charAtWithInt:i] == '<') {
      genericCount++;
    }
    else if ([str charAtWithInt:i] == '>') {
      genericCount--;
    }
  }
  [result addWithId:[((NSString *) nil_chk([str substring:startPos])) trim]];
  return result;
}

id<JavaLangReflectType> OrgJodaConvertAbstractTypeStringConverter_wildExtendsTypeWithJavaLangReflectType_(id<JavaLangReflectType> bound) {
  OrgJodaConvertAbstractTypeStringConverter_initialize();
  return (id<JavaLangReflectType>) cast_check([((JavaLangReflectMethod *) nil_chk(OrgJodaConvertAbstractTypeStringConverter_EXTENDS_TYPE)) invokeWithId:nil withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ bound } count:1 type:NSObject_class_()]], JavaLangReflectType_class_());
}

id<JavaLangReflectType> OrgJodaConvertAbstractTypeStringConverter_wildSuperTypeWithJavaLangReflectType_(id<JavaLangReflectType> bound) {
  OrgJodaConvertAbstractTypeStringConverter_initialize();
  return (id<JavaLangReflectType>) cast_check([((JavaLangReflectMethod *) nil_chk(OrgJodaConvertAbstractTypeStringConverter_SUPER_TYPE)) invokeWithId:nil withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ bound } count:1 type:NSObject_class_()]], JavaLangReflectType_class_());
}

id<JavaLangReflectParameterizedType> OrgJodaConvertAbstractTypeStringConverter_newParameterizedTypeWithIOSClass_withJavaLangReflectTypeArray_(IOSClass *base, IOSObjectArray *args) {
  OrgJodaConvertAbstractTypeStringConverter_initialize();
  return (id<JavaLangReflectParameterizedType>) cast_check([((JavaLangReflectMethod *) nil_chk(OrgJodaConvertAbstractTypeStringConverter_NEW_PARAM_TYPE)) invokeWithId:nil withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ base, args } count:2 type:NSObject_class_()]], JavaLangReflectParameterizedType_class_());
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJodaConvertAbstractTypeStringConverter)
